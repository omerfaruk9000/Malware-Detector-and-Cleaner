using System;
using System.IO;
using System.Net;

public class MalwareScanner
{
    private static readonly string[] signatures = new string[]
    {
        "EICAR-STANDARD-ANTIVIRUS-TEST-FILE!",
        "4D5A90000300000004000000FFFF0000B8000000",  // Common signature for PE files
        "This program cannot be run in DOS mode",
        "MZP",
        "5A4D",
        "504B0304",  // ZIP file signature
        "504B0506",  // Empty ZIP file signature
        "504B0708",  // Spanned ZIP file signature
        "526172211A0700CF907300000D000000000000",  // RAR file signature
        "3C3F786D6C2076657273696F6E3D22312E30223F3E",  // XML file signature
        "25504446",  // PDF file signature
        "CAFEBABE",  // Java class file signature
        "EFBBBF",  // UTF-8 BOM
        "FEFF",  // UTF-16 (BE) BOM
        "FFFE",  // UTF-16 (LE) BOM
        "00010000",  // TrueType font file signature
        "FFFE3C0064006F006300",  // Unicode UTF-16 XML header
        "504B030414000600080000002100",  // Office Open XML
        "D0CF11E0A1B11AE1"  // Older Microsoft Office files
    };

    public static bool FileContainsSignature(string filePath)
    {
        try
        {
            using (FileStream fs = new FileStream(filePath, FileMode.Open, FileAccess.Read))
            {
                using (StreamReader sr = new StreamReader(fs))
                {
                    string fileContent = sr.ReadToEnd();
                    foreach (var signature in signatures)
                    {
                        if (fileContent.Contains(signature))
                        {
                            return true;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error: " + ex.Message);
        }

        return false;
    }
}

public class MalwareCleaner
{
    public static void CleanFile(string filePath)
    {
        try
        {
            if (File.Exists(filePath))
            {
                File.Delete(filePath);
                Console.WriteLine("File deleted: " + filePath);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error deleting file: " + ex.Message);
        }
    }
}

public class BehaviorBasedScanner
{
    public static bool CheckBehavior(string filePath)
    {
        try
        {
            string directoryToCopy = @"C:\Temp"; // Kopyalanacak klasör
            string directoryToMove = @"C:\Backup"; // Taşınacak klasör
            string directoryToWrite = @"C:\Temp"; // Yeni dosya oluşturulacak klasör

            // Dosyayı kopyalayarak davranışı simüle edelim
            string copiedFilePath = Path.Combine(directoryToCopy, Path.GetFileName(filePath));
            File.Copy(filePath, copiedFilePath);

            // Dosyayı taşıyarak davranışı simüle edelim
            string movedFilePath = Path.Combine(directoryToMove, Path.GetFileName(filePath));
            File.Move(filePath, movedFilePath);

            // Yeni bir dosya oluşturarak davranışı simüle edelim
            string newFilePath = Path.Combine(directoryToWrite, "NewFile.txt");
            File.WriteAllText(newFilePath, "This is a new file created by BehaviorBasedScanner.");

            // Örnek bir web sitesine HTTP isteği göndererek ağ trafiği oluşturalım
            string url = "https://example.com";
            using (var client = new WebClient())
            {
                string response = client.DownloadString(url);
                Console.WriteLine($"HTTP GET request sent to {url}, Response: {response}");
            }

            // Tüm davranışları başarılı şekilde simüle edersek true döndür
            Console.WriteLine($"Behavior detected: File copied to {directoryToCopy}, File moved to {directoryToMove}, New file created in {directoryToWrite}, HTTP request sent to {url}");
            return true;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during behavior check: {ex.Message}");
            return false;
        }
    }
}

public class MainProgram
{
    public static void Main(string[] args)
    {
        string pathToScan = @"C:\Users\User"; // Tarama yapılacak dizin

        // İmza tabanlı tespit
        foreach (string file in Directory.GetFiles(pathToScan, "*.*", SearchOption.AllDirectories))
        {
            if (MalwareScanner.FileContainsSignature(file))
            {
                Console.WriteLine("Malware found (Signature-based): " + file);
                MalwareCleaner.CleanFile(file);
            }

            // Davranış tabanlı tespit
            if (BehaviorBasedScanner.CheckBehavior(file))
            {
                Console.WriteLine("Malware found (Behavior-based): " + file);
                MalwareCleaner.CleanFile(file);
            }
        }
    }
}
